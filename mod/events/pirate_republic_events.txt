namespace = pirate_republic
## Pirates have been controlling a system for more than 10 years (monthly pulse)
@stabilitylevel5 = 75
# on_monthly_pulse
event = {
	id = pirate_republic.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_global_flag = pirate_republic_inactive }
		any_country = {
			OR = {
				is_country_type = pirate
				is_country_type = pirate_waves_country
			}
			any_owned_fleet = {
				is_ship_size = pirate_station
				NOT = { has_fleet_flag = pirate_waves_station_life_flag }
			}
		}
	}
	immediate = {
		random_playable_country = {
			limit = {
				NOR = {
					has_country_flag = pirate_waves_disappear
					has_country_flag = pirates_spawned # <- timed flag from on_pirate_spawn 10 years
					is_gestalt = yes
					any_situation = { is_situation_type = situation_planetary_revolt }
				}
				any_system_within_border = {
					any_fleet_in_system = {
						is_ship_size = pirate_station # is_pirate_system = yes
						NOT = { is_owned_by = prevprev }
						NAND = {
							has_fleet_flag = pirate_waves_station_flag
							has_fleet_flag = pirate_waves_station_life_flag # <- timed flag from on_pirate_spawn 10 years
						}
					}
				}
				any_system_within_border = {
					is_capital_system = no
					any_system_colony = {
						is_under_colonization = no
						NOT = { has_planet_flag = pirate_invasion }
						has_ground_combat = no
						owner = { is_primitive = no }
					}
					NOT = {
						any_fleet_in_system = {
							exists = owner
							owner = { is_country_type = rebel }
						}
					}
				}
			}
			weights = { base = 1 modifier = { add = 1 is_ai = no } }
			random_system_within_border = {
				limit = {
					any_fleet_in_system = {
						is_ship_size = pirate_station # is_pirate_system = yes
						NOT = { is_owned_by = prevprev }
						NAND = {
							has_fleet_flag = pirate_waves_station_flag
							has_fleet_flag = pirate_waves_station_life_flag # <- timed flag from on_pirate_spawn 10 years
						}
					}
				}
				save_event_target_as = pirate_system # To prevent msg without exist
				prev = {
					country_event = { id = pirate_republic.10 }
					set_timed_country_flag = { flag = pirate_waves_disappear months = 4 }
				}
			}
		}
	}
}

# The pirates disappeared!
country_event = {
	id = pirate_republic.10
	title = pirate_republic.10.name
	picture = GFX_evt_unknown_ships
	desc = pirate_republic.10.desc
	location = event_target:pirate_system
	is_triggered_only = yes
	trigger = {
		has_country_flag = pirate_waves_disappear
		exists = event_target:pirate_system
		NOT = { any_situation = { is_situation_type = situation_planetary_revolt } }
	}
	immediate = {
		random_country = {
			limit = {
				is_pirate = yes # < v3.4 only works for single country type
				# OR = {
				# 	is_country_type = pirates
				# 	is_country_type = pirate_waves_country
				# }
				any_owned_fleet = {
					is_ship_size = pirate_station
					solar_system = { is_owned_by = root }
					NAND = {
						has_fleet_flag = pirate_waves_station_flag
						has_fleet_flag = pirate_waves_station_life_flag
					}
				}
			}
			weights = { base = 1 modifier = { add = 20 is_country_type = pirate } }
			save_event_target_as = pirate_band
			save_event_target_as = current_pirate_country
			random_owned_fleet = {
				limit = {
					is_ship_size = pirate_station
					NAND = {
						has_fleet_flag = pirate_waves_station_flag
						has_fleet_flag = pirate_waves_station_life_flag
					}
				}
				solar_system = {
					save_event_target_as = pirate_system
					if = {
						limit = {
							any_system_colony = {
								is_under_colonization = no
								is_owned_by = root
								is_controlled_by = root
								planet_stability < @stabilitylevel5
								NOR = {
									has_orbital_bombardment = yes
									has_ground_combat = yes
									is_under_colonization = yes
									has_planet_flag = pirate_invasion
									has_planet_flag = slave_revolt
									has_planet_flag = recent_unrest_event
									has_planet_flag = slave_stirring
									has_ground_combat = yes
									has_modifier = slave_hunger_strike
									has_modifier = slave_riots
									has_modifier = adding_unrest_slaves
									has_modifier = revolt_suppressed
								}
							}
							NOT = {
								any_fleet_in_system = {
									exists = owner
									owner = { is_country_type = rebel }
								}
							}
						}
						random_system_colony = {
							limit = {
								is_under_colonization = no
								is_owned_by = root
								is_controlled_by = root
								planet_stability < @stabilitylevel5
							}
							save_event_target_as = pirate_target
						}
					} else_if = {
						limit = {
							closest_system = {
								min_steps = 1
								max_steps = 10
								limit = {
									is_owned_by = root
									is_capital_system = no
									any_system_colony = {
										planet_stability < @stabilitylevel5
										NOR = {
											has_orbital_bombardment = yes
											has_ground_combat = yes
											is_under_colonization = yes
											has_planet_flag = pirate_invasion
											has_planet_flag = slave_revolt
											has_planet_flag = recent_unrest_event
											has_planet_flag = slave_stirring
											has_ground_combat = yes
											has_modifier = slave_hunger_strike
											has_modifier = slave_riots
											has_modifier = adding_unrest_slaves
											has_modifier = revolt_suppressed
										}
										is_owned_by = root
										is_controlled_by = root
									}
									NOT = {
										any_fleet_in_system = {
											exists = owner
											owner = { is_country_type = rebel }
										}
									}
								}
							}
						}
						closest_system = {
							min_steps = 1
							max_steps = 10
							limit = {
								is_owned_by = root
								is_capital_system = no
								any_system_colony = {
									NOR = {
										is_under_colonization = yes
										has_planet_flag = pirate_invasion
										has_planet_flag = slave_revolt
										has_planet_flag = recent_unrest_event
										has_ground_combat = yes
									}
									is_owned_by = root
									is_controlled_by = root
									planet_stability < @stabilitylevel5
									# owner = {
									# 	is_primitive = no
									# 	is_hostile = event_target:pirate_band
									# }
								}
								NOT = {
									any_fleet_in_system = {
										exists = owner
										owner = { is_country_type = rebel }
									}
								}
							}
							random_system_colony = {
								limit = {
									NOR = {
										is_under_colonization = yes
										has_planet_flag = pirate_invasion
										has_planet_flag = slave_revolt
										has_planet_flag = recent_unrest_event
										has_ground_combat = yes
									}
									is_owned_by = root
									is_controlled_by = root
									planet_stability < @stabilitylevel5
									# owner = {
									# 	is_primitive = no
									# 	is_hostile = event_target:pirate_band
									# }
								}
								save_event_target_as = pirate_target
							}
						}
					} else_if = {
						limit = { exists = prevprev.species }
						prevprev.species = { save_event_target_as = pirate_species }
						closest_system = {
							min_steps = 0
							max_steps = 10
							limit = {
								is_capital_system = no
								any_system_planet = {
									is_colonizable = yes
									habitability = { who = event_target:pirate_species value > 0.6 }
								}
								NOT = {
									any_fleet_in_system = {
										exists = owner
										owner = { is_country_type = rebel }
									}
								}
							}
							random_system_planet = {
								limit = {
									is_colonizable = yes
									habitability = { who = event_target:pirate_species value > 0.6 }
								}
								weights = {
									base = 1
									modifier = { add = 2 habitable_planet = yes }
								}
								save_event_target_as = pirate_target
								while = {
									count = 4
									create_pop = {
										species = event_target:pirate_species
										ethos = { ethic = "ethic_militarist" }
									}
								}
								set_controller = prevprevprevprev
								set_owner = prevprevprevprev
								if = {
									limit = { merg_is_habitat = yes }
									add_building = building_hab_capital
								} else = { add_building = building_slave_capital }
							}
						}
					}
					every_fleet_in_system = {
						limit = {
							exists = owner
							is_owned_by = prevprevprev # event_target:pirate_band
						}
						if = {
							limit = { is_mobile = yes }
							delete_fleet = {
								target = this
								# kill_leader = no
							}
						} else = { destroy_fleet = this }
					}
				}
			}
			if = {
				limit = {
					exists = this # As it could be destroyed earlier...
					is_scope_valid = yes
					is_country_type = pirate
				}
				set_country_flag = silence_destroy_event
				destroy_country = yes # Not compatible with Pirate Waves, so destroy only system fleets.
			}
		}
	}
	option = {
		# Where could they have gone?
		name = pirate_republic.10.option
		hidden_effect = {
			if = {
				limit = {
					exists = event_target:pirate_target
					event_target:pirate_target = { is_scope_type = planet }
				}
				event_target:pirate_target = {
					planet_event = { id = pirate_republic.11 days = 16 random = 8 }
				}
			} # else = { log="pirate_target not found for \\[This.GetName]" }
		}
	}
}

## Pirate invasion! (similar unrest.4200 and unrest.160)
# From = probably root.owner
# Requires not neccessarly the event targets attacked_system_star, mercenary_hirer, raid_source, because of create_pirate_waves_fleet
planet_event = {
	id = pirate_republic.11
	title = pirate_republic.11.name
	# desc = pirate_republic.11.desc
	# desc = {
	# 	trigger = {
	# 		owner = { is_gestalt = no }
	# 	}
	# 	text = pirate_republic.11.desc # unrest.55.desc.standard
	# }
	desc = {
		trigger = {
			# owner = { is_gestalt = yes }
			any_owned_pop = {
				is_sapient = yes
				is_gestalt = no
			}
		}
		text = pirate_republic.11.desc # unrest.55.desc.gestalt_standard
	}
	desc = {
		trigger = {
			owner = { is_gestalt = yes }
			count_owned_pop = {
				limit = {
					is_sapient = yes
					is_gestalt = no
				}
				count = 0
			}
		}
		text = unrest.55.desc.gestalt_breakaway_gestalt
	}
	picture = GFX_evt_night_raid # GFX_evt_ground_combat
	show_sound = event_planetary_riot # event_air_raid_siren
	location = root
	is_triggered_only = yes
	situation = event_target:new_situation
	pre_triggers = { has_owner = yes }
	trigger = {
		is_colony = yes
		# exists = event_target:pirate_target
		exists = owner
		owner = { merg_is_default_empire = yes }
		is_owned_by = root
		is_controlled_by = root
		planet_stability < @stabilitylevel5
		NOR = {
			has_orbital_bombardment = yes
			has_ground_combat = yes
			is_under_colonization = yes
			has_planet_flag = pirate_invasion
			has_planet_flag = slave_revolt
			has_planet_flag = recent_unrest_event
			has_planet_flag = slave_stirring
			has_ground_combat = yes
			has_modifier = slave_hunger_strike
			has_modifier = slave_riots
			has_modifier = adding_unrest_slaves
			has_modifier = revolt_suppressed
		}
	}
	immediate = {
		random_owned_pop = {
			limit = { is_sapient = yes }
			weights = {
				base = 1
				modifier = { add = 2 is_unemployed = yes }
				modifier = { add = 10 is_enslaved = yes }
			}
			species = { save_event_target_as = rebellion_species }
		}
		if = { limit = { NOT = { exists = event_target:rebellion_species } }
			random_list = {
				25 = { owner_species = { save_event_target_as = rebellion_species } }
				75 = {
					modifier = { factor = 0 NOT = { exists = event_target:pirate_band } }
					event_target:pirate_band.owner_species = { save_event_target_as = rebellion_species }
				}
			 }
		}
		if = { limit = { NOT = { exists = event_target:pirate_band } }
			from = { save_event_target_as = pirate_band }
		}
		if = { limit = { exists = event_target:pirate_band }
			event_target:pirate_band.owner_species = { save_event_target_as = leader_species }
		}
		if = { limit = { NOT = { exists = event_target:leader_species } }
			event_target:rebellion_species = { save_event_target_as = leader_species }
		}
		if = { limit = { NOT = { exists = event_target:pirate_system } }
			solar_system = { save_event_target_as = pirate_system }
		}
		if = { limit = { host_has_dlc = "Megacorp" }
			create_rebels = {
				name = random
				ethos = random
				# ethos = {
				# 	ethic = "ethic_fanatic_militarist"
				# 	ethic = "ethic_authoritarian"
				# }
				authority = auth_corporate
				civics = random
				# civics = {
				# 	civic = civic_criminal_heritage
				# 	civic = random
				# }
				origin = "origin_separatists" # "origin_void_dwellers"
				species = event_target:rebellion_species
				flag = random
				effect = {
					shift_ethic = ethic_authoritarian
					# country_add_ethic = ethic_authoritarian
					force_add_civic = civic_criminal_heritage
					save_event_target_as = pirate_republic
				}
			}
		} else = {
			create_rebels = {
				name = random
				ethos = random
				# ethos = {
				# 	ethic = "ethic_fanatic_militarist"
				# 	ethic = "ethic_authoritarian"
				# }
				authority = auth_oligarchic
				civics = random
				# civics = {
				# 	civic = civic_corporate_dominion
				# 	civic = random
				# }
				origin = "origin_separatists" # "origin_void_dwellers"
				species = event_target:rebellion_species
				flag = random
				effect = {
					shift_ethic = ethic_authoritarian
					# country_add_ethic = ethic_authoritarian
					force_add_civic = civic_corporate_dominion
					save_event_target_as = pirate_republic # rebel_empire
				}
			}
		}

		if = { limit = { NOT = { exists = event_target:pirate_republic } }
			break = yes
		} # else = { log="Separatists: \\[pirate_republic.GetName] and \\[last_created_country.GetName]" }
		event_target:pirate_republic = {
			randomize_flag_symbol = pirate
			set_graphical_culture = "pirate_01"
			set_country_flag = pirate_republic
			# set_country_type = default # We don't need the rebel country type with this version, but create_rebels effect has useful functionalities
			if = {
				limit = { has_trait = trait_necrophage }
				set_origin = origin_necrophage
			} else_if = {
				limit = { has_trait = trait_void_dweller_1 }
				set_origin = origin_void_dwellers
			} else_if = {
				limit = { has_trait = trait_cave_dweller }
				set_origin = origin_subterranean
			} else_if = {
				limit = {
					root.owner = { has_origin = origin_tree_of_life }
					has_trait = trait_hive_mind
				}
				set_origin = origin_tree_of_life
			}
			if = {
				limit = {
					OR = {
						has_trait = trait_machine_unit
						has_trait = trait_hive_mind
					}
					is_gestalt = no
				}
				shift_ethic = ethic_gestalt_consciousness
				change_government = random
			} else = { shift_ethic = ethic_fanatic_militarist }
			# else = {
			# 	root = {
			# 		switch = { trigger = has_situation_flag
			# 			pacifist = { prev = { shift_ethic = ethic_fanatic_pacifist } }
			# 			militarist = { prev = { shift_ethic = ethic_fanatic_militarist } }
			# 			authoritarian = { prev = { shift_ethic = ethic_fanatic_authoritarian } }
			# 			egalitarian = { prev = { shift_ethic = ethic_fanatic_egalitarian } }
			# 			xenophile = { prev = { shift_ethic = ethic_fanatic_xenophile } }
			# 			xenophobe = { prev = { shift_ethic = ethic_fanatic_xenophobe } }
			# 			spiritualist = { prev = { shift_ethic = ethic_fanatic_spiritualist } }
			# 			materialist = { prev = { shift_ethic = ethic_fanatic_materialist } }
			# 		}
			# 	}
			# 	change_government = { authority = random civics = random }
			# }

			establish_communications_no_message = root.owner
			set_relation_flag = { flag = rebelling_pirates_former_owner who = root.owner }
			create_leader = {
				class = random_ruler
				species = event_target:leader_species
				name = random
				skill = 3
				effect = { add_trait = random_common }
			}
			assign_leader = last_created_leader
			set_pirates_difficulty = yes
			# Create a fleet based on fleet power.
			create_fleet = {
				name = "NAME_Pirate_Fleet"
				effect = {
					save_event_target_as = pirate_waves_fleet
					# Owner is set before the ships are created so that random naming works.
					set_owner = prev
					# Create ships
					create_pirate_waves_fleet = yes
					# Fleet settings
					set_location = root
					# set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 150
				}
			}
			create_leader = {
				class = admiral
				species = event_target:leader_species
				name = random
				skill = 2
				effect = { add_trait = random_common }
			}
			event_target:pirate_waves_fleet = { assign_leader = last_created_leader }

			root = {
				if = { limit = { any_owned_pop = { is_enslaved = yes } }
					set_timed_planet_flag = { flag = slave_revolt years = 2 }
					prev = {
						set_timed_country_flag = { flag = slave_rebels years = 2 }
						set_relation_flag = {
							flag = rebelling_slaves_former_owner
							who = root.owner
						}
					}
				}
				set_timed_planet_flag = { flag = recent_unrest_event years = 2 }

				every_planet_army = {
					limit = {
						army_type = slave_army
						is_owned_by = planet.owner
					}
					set_owner = event_target:pirate_republic
				}
				# Dyn. amount (needs to be after create_pirate_waves_fleet)
				set_variable = { which = num_armies_var value = 5 }
				change_variable = { which = num_armies_var value = prev.pirates_factor }
				multiply_variable = { which = num_armies_var value = prev.pirates_f_tmp2 }
				round_variable = num_armies_var
				# log="Pirate invasion army amount \\[This.num_armies_var] and \\[Prev.pirates_f_tmp2]"
				while = { count = num_armies_var # 25
					create_army = {
						name = "Pirate Invaders"
						owner = event_target:pirate_republic
						species = event_target:rebellion_species
						type = "pirate_army"
					}
				}
				# prev = { divide_variable = { which = pirates_f_tmp2 value = 2 } }
				divide_variable = { which = num_armies_var value = 2 }
				create_fleet = {
					name = "NAME_Pirate_Fleet"
					effect = {
						# Owner is set before the ships are created so that random naming works.
						set_owner = event_target:pirate_republic
						# Create ships
						while = {
							count = prev.num_armies_var # 10
							create_army_transport = {
								ship_name = "NAME_Freedom_Fighters"
								graphical_culture = "pirate_01"
								army_name = "Pirate Invaders"
								army_type = "pirate_army"
								species = event_target:leader_species
							}
						}
						# Fleet settings
						set_location = root
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = self
						set_aggro_range = 150
					}
				}
				divide_variable = { which = num_armies_var value = prev.pirates_f_tmp2 }
				round_variable = num_armies_var
				random_owned_pop = {
					limit = {
						NOT = { is_same_species = prev.owner_species }
						is_robot_pop = no
						is_sapient = yes
						is_enslaved = no
					}
					weights = { base = 1
						modifier = { add = 1 is_unemployed = yes }
						modifier = { add = 1 ideal_planet_class = prev }
						modifier = { add = 1 prev = { habitability = { who = prev value > 0.7 } } }
					}
					planet = {
						while = { count = num_armies_var # 2
							create_army = {
								name = "NAME_Freedom_Fighters"
								owner = event_target:pirate_republic
								species = prev.species
								type = "rebel_slave_defense_army"
							}
						}
					}
				}
				every_owned_pop = {
					limit = { is_enslaved = yes }
					planet = {
						create_army = {
							name = "NAME_Freedom_Fighters"
							owner = event_target:pirate_republic
							species = prev.species
							type = "rebel_slave_defense_army"
						}
					}
				}
				owner = {
					every_relation = {
						limit = { has_communications = prev }
						establish_communications_no_message = prevprevprev
					}
				}
			}
			create_leader = {
				class = general
				species = event_target:leader_species
				name = random
				skill = 2
				effect = { add_trait = random_common }
			}
			random_owned_army = {
				limit = {
					NOT = { exists = leader }
					NAND = {
						exists = planet
						planet = { has_ground_combat = yes }
					}
					NAND = {
						exists = fleet
						fleet = { is_in_combat = yes }
					}
				}
				weights = { base = 1 modifier = { add = 3 exists = planet } }
				assign_leader = last_created_leader
			}
			# From unrest.4050
			save_event_target_as = new_owner_empire
			root = {
				owner = {
					start_situation = {
						type = situation_planetary_revolt
						target = root
						effect = {
							save_event_target_as = new_situation
							event_target:new_owner_empire = { set_country_flag = revolt_joiner_empire_@event_target:new_situation }
						}
					}
				}
				set_timed_planet_flag = { flag = recent_unrest_event years = 2 }
			}
			set_hostile = root.owner
		}
		set_planet_flag = pirate_invasion
	}
	after = {
		if = { limit = { is_variable_set = num_armies_var }
			clear_variable = num_armies_var
		}
		if = {
			limit = { exists = event_target:pirate_republic }
			event_target:pirate_republic = {
				declare_war = {
					target = root.owner
					attacker_war_goal = wg_independence
					name = {
						key = NAME_WAR_OF_REVOLT
						variable_string = "[Root.Target.GetName]"
					}
				}
				if = { limit = { is_variable_set = pirates_f_tmp }
					clear_variable = pirates_f_tmp
				}
				if = { limit = { is_variable_set = pirates_f_tmp2 }
					clear_variable = pirates_f_tmp2
				}
			}
			solar_system = {
				if = {
					limit = { exists = starbase }
					starbase = {
						set_owner = event_target:pirate_republic
						if = { limit = { has_starbase_size = starbase_outpost }
							set_starbase_size = starbase_starport
							set_starbase_module = { slot = 1 module = shipyard }
							set_starbase_module = { slot = 2 module = shipyard }
						} else_if = { limit = { NOT = { has_starbase_module = shipyard } }
							set_starbase_module = { slot = 1 module = shipyard }
							set_starbase_module = { slot = 2 module = shipyard }
						}
					}
				} else = {
					create_starbase = {
						size = starbase_starport
						module = shipyard
						module = shipyard
						owner = event_target:pirate_republic
					}
				}
				add_claims = { who = root.owner show_notification = no }
			}
		}
	}
	option = {
		name = pirate_republic.11.option
		hidden_effect = {
			# Fallback if race condition?
			if = {
				limit = { exists = event_target:pirate_republic }
				event_target:pirate_republic = {
					if = { limit = { NOT = { has_country_flag = pirate_republic } }
						randomize_flag_symbol = pirate
						set_graphical_culture = "pirate_01"
						set_country_flag = pirate_republic
						establish_communications_no_message = root.owner
						set_relation_flag = { flag = rebelling_pirates_former_owner who = root.owner }
						create_leader = {
							class = random_ruler
							species = owner_species
							name = random
							skill = 2
							effect = { add_trait = random_common }
						}
						assign_leader = last_created_leader
						set_pirates_difficulty = yes
						# Create a fleet based on fleet power.
						create_fleet = {
							name = "NAME_Pirate_Fleet"
							effect = {
								save_event_target_as = pirate_waves_fleet
								# Owner is set before the ships are created so that random naming works.
								set_owner = event_target:pirate_republic # prev not sure
								# Create ships
								create_pirate_waves_fleet = yes
								# Fleet settings
								set_location = root
								# set_fleet_stance = aggressive
								set_aggro_range_measure_from = self
								set_aggro_range = 150
							}
						}
						create_leader = {
							class = general
							species = event_target:rebellion_species
							name = random
							skill = 2
							effect = { add_trait = random_common }
						}
						root = {
							owner = {
								every_relation = {
									limit = { has_communications = prev }
									establish_communications_no_message = prevprevprev
								}
							}
							# Dyn. amount (needs to be after create_pirate_waves_fleet)
							set_variable = { which = num_armies_var value = 5 }
							change_variable = { which = num_armies_var value = prev.pirates_factor }
							multiply_variable = { which = num_armies_var value = prev.pirates_f_tmp2 }
							# log="Pirate invasion army amount \\[This.num_armies_var] and \\[Prev.pirates_f_tmp2]"
							while = {
								count = num_armies_var # 25
								create_army = {
									name = "Pirate Invaders"
									owner = event_target:pirate_republic
									species = event_target:rebellion_species
									type = "pirate_army"
								}
							}
							last_created_army = { assign_leader = last_created_leader }
							# prev = { divide_variable = { which = pirates_f_tmp2 value = 2 } }
							divide_variable = { which = num_armies_var value = 2 }
							create_fleet = {
								name = "NAME_Pirate_Fleet"
								effect = {
									# Owner is set before the ships are created so that random naming works.
									set_owner = event_target:pirate_republic
									# Create ships
									while = {
										count = prev.num_armies_var # 10
										create_army_transport = {
											ship_name = "NAME_Freedom_Fighters"
											graphical_culture = "pirate_01"
											army_name = "Pirate Invaders"
											army_type = "pirate_army"
											species = event_target:leader_species
										}
									}
									# Fleet settings
									set_location = root
									set_fleet_stance = aggressive
									set_aggro_range_measure_from = self
									set_aggro_range = 150
								}
							}
							divide_variable = { which = num_armies_var value = prev.pirates_f_tmp2 }
							round_variable = num_armies_var
							while = {
								count = num_armies_var # 2
								create_army = {
									name = "NAME_Freedom_Fighters"
									owner = event_target:pirate_republic
									species = event_target:rebellion_species
									type = "rebel_slave_defense_army"
								}
							}
						}
						random_owned_army = {
							limit = {
								NOT = { exists = leader }
								NAND = {
									exists = planet
									planet = { has_ground_combat = yes }
								}
								NAND = {
									exists = fleet
									fleet = { is_in_combat = yes }
								}
							}
							weights = { base = 1 modifier = { add = 3 exists = planet } }
							assign_leader = last_created_leader
						}
					}
					set_hostile = root.owner
				}
				set_planet_flag = pirate_invasion
			}
		}
	}
}

## Pirates lost (on_planet_defenders_win similar unrest.161)
# Root = country, planet owner
# From = country, attack leader
# fromfrom = planet
country_event = {
	id = pirate_republic.12
	title = pirate_republic.12.name
	desc = pirate_republic.12.desc
	picture = GFX_evt_alien_propaganda
	show_sound = event_celebration
	location = fromfrom
	is_triggered_only = yes
	trigger = {
		merg_is_default_empire = yes
		fromfrom = {
			has_planet_flag = pirate_invasion
			controller = { is_same_empire = root }
		}
	}
	immediate = {
		fromfrom = {
			add_modifier = { modifier = revolt_suppressed years = 5 }
			save_event_target_as = pirate_target
			remove_planet_flag = pirate_invasion
			# remove_planet_flag = slave_revolt_chain_active
			# remove_planet_flag = slave_riots
			# remove_planet_flag = slave_resistance
			# remove_planet_flag = slave_stirring
			remove_planet_flag = slave_revolt
		}
	}
	after = {
		from = {
			set_hostile = root
			if = {
				limit = {
					count_owned_planet = { count = 0 }
					NOT = {
						any_owned_army = {
							is_defensive_army = no
							exists = planet
							planet = { has_ground_combat = yes }
						}
					}
				}
				# set_country_type = pirate_waves_country
				set_country_flag = silence_destroy_event
				destroy_country = yes
			}
		}
	}
	option = {
		name = pirate_republic.12.option
		tooltip = {
			add_modifier = { modifier = revolt_suppressed years = 5 }
		}
	}
}

## Pirates won (on_planet_defenders_lose similar unrest.167)
# this = country, planet owner
# from = country, attack leader
# fromfrom = planet
country_event = {
	id = pirate_republic.13
	title = pirate_republic.13.name
	desc = pirate_republic.13.desc
	picture = GFX_evt_burning_settlement
	show_sound = event_air_raid_siren
	location = event_target:pirate_republic_planet
	is_triggered_only = yes
	trigger = {
		exists = from
		from = {
			OR = {
				is_country_type = rebel
				is_pirate = yes
			}
			has_country_flag = pirate_republic
		}
		exists = fromfrom
		fromfrom = {
			OR = {
				has_planet_flag = pirate_invasion
				has_planet_flag = recent_unrest_event
			}
		}
	}
	immediate = {
		fromfrom = {
			save_event_target_as = pirate_republic_planet
			remove_planet_flag = pirate_invasion
			remove_planet_flag = slave_revolt_chain_active
			remove_planet_flag = slave_riots
			remove_planet_flag = slave_resistance
			remove_planet_flag = slave_stirring
			remove_planet_flag = slave_revolt
			kill_leader = { type = governor }
		}
		from = {
			save_event_target_as = pirate_republic
		}
		save_event_target_as = old_owner
		fromfrom.solar_system = {
			if = { limit = { exists = starbase }
				starbase = { set_owner = event_target:pirate_republic }
			}
			add_claims = { who = root num_of_claims = 1 show_notification = no }
		}
		if = {
			limit = {
				# any_relation = {
				any_playable_country = {
					has_communications = root
					has_country_flag = pirate_republic
					any_owned_planet = {
						distance = {
							source = fromfrom
							max_distance <= 250 # 300
							min_distance >= 0
						}
					}
					NOR = {
						is_in_federation_with = root
						is_same_empire = root
						is_same_empire = from
					}
				}
			}
			# random_relation = {
			random_playable_country = {
				limit = {
					has_communications = root
					has_country_flag = pirate_republic
					any_owned_planet = {
						distance = {
							source = fromfrom
							max_distance <= 250 # 300
							min_distance >= 0
						}
					}
					NOR = {
						is_in_federation_with = root
						is_same_empire = root
						is_same_empire = from
					}
				}
				weights = { base = 1 modifier = { add = 3 is_at_war_with = root } }
				country_event = { id = pirate_republic.15 days = 5 scopes = { fromfrom = event_target:pirate_republic } }
			}
		}
	}
	after = {
		## Create start resources
		from = {
			add_resource = {
				energy = 2000
				minerals = 1000
				unity = 20000
				influence = 400
			}
			add_500_unity_per_year_passed = yes
			create_starting_leaders = yes

			country_event = { id = game_start.6 days = 6 random = 2 } # advanced_empire
			country_event = { id = game_start.8 days = 9 random = 3 } # +tech +resources
			country_event = { id = game_start.9 days = 12 random = 4 } # empire_init_create_ships

			remove_country_flag = pirate_waves_spawn_allowed
			remove_country_flag = pirate_waves_very_easy
			remove_country_flag = pirate_waves_easy
			remove_country_flag = pirate_waves_medium
			remove_country_flag = pirate_waves_hard
			remove_country_flag = pirate_waves_very_hard
			remove_country_flag = pirate_waves_insane

			if = { limit = { is_variable_set = pirate_waves_difficulty }
				clear_variable = pirate_waves_difficulty
			}
			if = { limit = { is_variable_set = pirates_factor }
				clear_variable = pirates_factor
			}
			if = {
				limit = { count_owned_planet = { count = 0 } }
				event_target:pirate_republic_planet = {
					every_planet_army = {
						limit = { exists = owner NOT = { is_owned_by = event_target:pirate_republic } }
						set_owner = event_target:pirate_republic
					}
					set_owner = event_target:pirate_republic
				}
			}
			set_country_type = default

			from = {
				planet_event = { id = game_start.20 days = 80 random = 30 } # Remove blockers on capital
				planet_event = { id = game_start.21 days = 120 random = 40 } # Upgrade colony shelter on additional colonies.
				planet_event = { id = game_start.22 days = 180 random = 60 } # Set up additional buildings (mines, farms, power plants)
				planet_event = { id = game_start.23 days = 360 random = 90 } # Add additional pops

				solar_system = {
					if = {
						limit = {
							root = { has_technology = tech_starbase_4 }
							NAND = {
								exists = starbase
								starbase = { has_starbase_size > starbase_starfortress }
							}
						}
						create_starbase = {
							size = starbase_starfortress
							owner = event_target:pirate_republic
							module = shipyard
							module = missile_battery
							building = defense_grid
						}
					} else_if = {
						limit = {
							NOT = { root = { has_technology = tech_starbase_5 } }
							NAND = {
								exists = starbase
								starbase = { has_starbase_size > starbase_starhold }
							}
						}
						create_starbase = {
							size = starbase_starhold
							owner = event_target:pirate_republic
							module = shipyard
							module = missile_battery
							building = defense_grid
						}
					}

					random_fleet_in_system = {
						limit = {
							exists = owner
							is_owned_by = root
							is_civilian = yes
						}
						set_owner = event_target:pirate_republic
						if = {
							limit = {
								is_ship_class = shipclass_science_ship
								exists = leader
							}
							leader = { set_owner = event_target:pirate_republic }
							assign_leader = leader
						} else_if = {
							limit = { is_ship_class = shipclass_transport }
							# Give armies (general)
							root = {
								every_owned_army = {
									limit = {
										exists = fleet
										NOT = { is_owned_by = prev }
										# fleet = { is_same_value = prevprevprev }
									}
									set_owner = fleet.owner
								}
							}
							# Set leader
							if = {
								limit = { exists = leader }
								event_target:pirate_republic = {
									random_owned_army = {
										limit = { exists = fleet }
										assign_leader = prevprev.leader
									}
								}
								leader = { set_owner = event_target:pirate_republic }
							}
						}
					}
				}
			}
		}
	}
	option = {
		name = pirate_republic.13.option
		hidden_effect = {
			if = {
				limit = {
					NOT = {
						any_subject = { has_country_flag = pirate_republic }
					}
				}
				country_event = { id = pirate_republic.14 }
			}
		}
	}
}

## The pirates institute a "Republic"
country_event = {
	id = pirate_republic.14
	title = pirate_republic.14.name
	desc = pirate_republic.14.desc
	picture = GFX_evt_smugglers_in_bar
	location = event_target:pirate_republic
	is_triggered_only = yes
	option = {
		name = pirate_republic.14.option
		hidden_effect = {
			country_event = { id = pirate_republic.100 }
		}
	}
}

# Defect request # similar unrest.168
country_event = {
	id = pirate_republic.15
	desc = unrest.168.desc
	location = event_target:pirate_republic_planet
	title = TRANSMISSION
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:pirate_republic
		planet_background = event_target:pirate_republic.capital_scope
		city_level = event_target:pirate_republic.capital_scope
		room = event_target:pirate_republic.ruler
	}
	trigger = {
		exists = event_target:old_owner
		OR = {
			exists = event_target:pirate_republic_planet
			exists = event_target:revolt_planet
		}
		exists = fromfrom
		# NOT = { has_active_event = pirate_republic.15 }
	}
	is_triggered_only = yes
	immediate = {
		save_event_target_as = new_owner
		event_target:pirate_republic_planet = { save_event_target_as = revolt_planet }
		if = {
			limit = { NOT = { exists = event_target:pirate_republic } }
			fromfrom = { save_event_target_as = pirate_republic }
		} else = { break = yes }
	}
	after = {
		if = {
			limit = { exists = event_target:pirate_republic event_target:pirate_republic = { has_country_flag = silence_destroy_event } }
			event_target:pirate_republic = { destroy_country = yes }
		}
	}
	option = { # YES!
		name = unrest.168.a
		ai_chance = { factor = 100 }

		event_target:pirate_republic_planet = {
			set_owner = event_target:new_owner
			solar_system = {
				if = { limit = { exists = starbase }
					starbase = { set_owner = event_target:new_owner }
				}
			}
		}
		hidden_effect = {
			event_target:old_owner = { country_event = { id = pirate_republic.169 } }
			event_target:pirate_republic = {
				# Full handover
				every_owned_fleet = {
					set_owner = event_target:new_owner
					# Recruit leader
					if = {
						limit = { exists = leader }
						leader = { set_owner = event_target:new_owner }
						if = { limit = { NOT = { is_ship_class = shipclass_transport } }
							assign_leader = leader
						}
						fleet_event = { id = khan.611 days = -1 }
					}
				}
				# Needs to be last (as the country gets destroyed without planet)
				every_owned_planet = {
					set_owner = event_target:new_owner
					set_controller = event_target:new_owner
					# Just to keep the initial conquered planets in line while they stabilize.
					add_modifier = { modifier = "revolt_suppressed" months = 20 }
				}
				every_owned_army = {
					limit = {
						NAND = {
							exists = planet
							planet = { has_ground_combat = yes }
						}
					}
					set_owner = event_target:new_owner
					# Recruit leader
					if = {
						limit = { exists = leader }
						leader = { set_owner = event_target:new_owner }
					}
				}
				every_owned_leader = {
					limit = { NOT = { leader_class = admiral } }
					set_owner = event_target:new_owner
				}
				set_country_flag = silence_destroy_event
			}
		}
		custom_tooltip = unrest.168.a.tooltip
		event_target:pirate_republic_planet = {
			add_modifier = { modifier = slaves_defected years = 10 }
		}
	}
	option = { # NO!
		name = unrest.168.b
		ai_chance = { factor = 0 }
	}
}

# on_starbase_disabled
# From = fleet that disabled the starbase
starbase_event = {
	id = pirate_republic.16
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = owner
		exists = from
		owner = {
			OR = {
				is_country_type = rebel
				is_pirate = yes
				AND = {
					is_default_or_fallen = yes
					root.from.owner = { is_country_type = rebel }
				}
			}
		}
		from.owner = {
			OR = {
				is_default_or_fallen = yes
				is_pirate = yes
				is_country_type = rebel
			}
		}
	}
	immediate = {
		# every_system_planet = {
		# 	limit = {
		# 		exists = owner
		# 		owner = {
		# 			is_default_or_fallen = yes
		# 		}
		# 		starbase = {
		# 			owner = {
		# 				is_default_or_fallen = yes
		# 				NOR = {
		# 					is_same_empire = from
		# 					is_at_war_with = prevprev.owner
		# 				}
		# 				NOT = {
		# 					has_active_event = {
		# 						primitive.180 # event to decide fate of primitive civ
		# 					}
		# 				}
		# 			}
		# 		}
		# 	}
		# 	planet_event = { id = action.86 } # planet flips to starbase owner
		# }
		set_owner = from
	}
}

# on_save_load
event = {
	id = pirate_republic.99
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		# Find raiding_marauder (parent)
		every_country = {
			limit = {
				is_country_type = rebel
				has_country_flag = pirate_republic
			}
			save_event_target_as = rebel_country
			if = {
				limit = {
					count_owned_planet = { count = 0 }
					count_owned_army = {
						count = 0
						limit = {
							is_defensive_army = no
							exists = planet
							planet = { has_ground_combat = no }
						}
					}
				}
				# log="Fix pirate_republic on save load" # for  [event_target:rebel_country.GetName].
				random_controlled_fleet = {
					limit = {
						OR = {
							is_mobile = no
							is_civilian = no
						}
						exists = solar_system
						solar_system = {
							exists = starbase
							any_system_colony = {
								OR = {
									owner = { NOT = { is_same_empire = event_target:rebel_country } }
									AND = {
										exists = controller
										controller = { NOT = { is_same_empire = event_target:rebel_country } }
									}
								}
							}
						}
					}
					solar_system = {
						# log="Fix pirate_republic at system [This.GetName]"
						random_system_colony = {
							limit = {
								is_colony = yes
								exists = owner
								OR = {
									owner = { NOT = { is_same_empire = event_target:rebel_country } }
									AND = {
										exists = controller
										controller = { NOT = { is_same_empire = event_target:rebel_country } }
									}
								}
							}
							weights = { base = 1 modifier = { add = 3 has_planet_flag = pirate_invasion } }
							owner = {
								save_event_target_as = old_owner
								country_event = { # Pirates lost
									id = pirate_republic.12
									days = 30
									random = 15
									scopes = {
										from = event_target:rebel_country
										fromfrom = prev
									}
								}
							}
							if = {
								limit = { exists = controller controller = { is_same_empire = event_target:rebel_country } }
								set_controller = event_target:old_owner
							}
							prev.starbase = { set_owner = event_target:rebel_country }
							set_timed_planet_flag = { flag = pirate_invasion years = 2 }
							create_fleet = {
								name = "NAME_Pirate_Fleet"
								effect = {
									# Owner is set before the ships are created so that random naming works.
									set_owner = event_target:rebel_country
									# Create ships
									while = {
										count = 10 # num_armies_var
										create_army_transport = {
											ship_name = "NAME_Freedom_Fighters"
											graphical_culture = "pirate_01"
											army_name = "Pirate Invaders"
											army_type = "pirate_army"
											species = event_target:rebel_country.owner_species
										}
									}
									# Fleet settings
									set_location = prev
									set_fleet_stance = aggressive
									set_aggro_range_measure_from = self
									set_aggro_range = 150
								}
							}
							event_target:rebel_country = {
								if = {
									limit = { NOT = { any_owned_leader = { leader_class = general } } }
									create_leader = {
										class = general
										species = owner_species
										name = random
										skill = 2
										effect = { add_trait = random_common }
									}
									last_created_fleet = { assign_leader = last_created_leader }
								} else = {
									random_owned_leader = {
										limit = { leader_class = general NOT = { exists = fleet } }
										last_created_fleet = { assign_leader = prev }
									}
								}
							}
						}
					}
				}
				if = {
					limit = {
						NAND = {
							any_controlled_fleet = { always = yes }
							any_owned_army = { is_defensive_army = no }
							any_controlled_fleet = { is_mobile = no exists = solar_system solar_system = { any_system_colony = { } } }
						}
					}
					set_country_flag = silence_destroy_event
				} else = {
					every_owned_fleet = {
						limit = { is_mobile = yes is_civilian = no }
						set_fleet_stance = aggressive
					}
					if = { limit = { exists = event_target:old_owner }
						set_hostile = event_target:old_owner
						# random_owned_starbase = {
						# 	set_owner = event_target:old_owner
						# 	fleet = { set_controller = event_target:rebel_country }
						# }
					}
				}
			} else = {
				random_controlled_planet = {
					weights = { base = 1 modifier = { add = 3 has_planet_flag = pirate_invasion } }
					save_event_target_as = pirate_republic_planet
				}
				if = {
					limit = { exists = event_target:pirate_republic_planet }
					event_target:pirate_republic_planet = {
						set_planet_flag = pirate_invasion
						owner = {
							country_event = {
								id = pirate_republic.13
								days = 4
								scopes = {
									from = event_target:rebel_country
									fromfrom = event_target:pirate_republic_planet
								}
							}
						}
					}
				} else = {
					# set_country_type = pirate_waves_country
					set_country_flag = silence_destroy_event
				}
			}
			if = { limit = { has_country_flag = silence_destroy_event }
				every_owned_starbase = {
					solar_system = {
						every_system_planet = {
							limit = { has_planet_flag = pirate_invasion }
							remove_planet_flag = pirate_invasion
							if = {
								limit = {
									exists = owner
									NOT = { is_owned_by = event_target:rebel_country }
								}
								owner = { save_event_target_as = old_owner }
							}
						}
						starbase = { set_owner = event_target:old_owner }
					}
				}
				log="Destroy rebel country"
				destroy_country = yes
			}
		}
		# FIX pirate_waves leaders
		if = {
			limit = {
				is_pirate_waves_active = yes
				OR = {
					exists = event_target:pirate_waves_country
					exists = event_target:pirate_waves_2_country
				}
			}
			every_country = {
				limit = {
					OR = {
						is_pirate = yes
						is_country_type = rebel
					}
				}
				every_controlled_fleet = {
					limit = {
						is_mobile = yes
						is_civilian = no
						exists = leader
						leader = { NOT = { is_owned_by = prevprev } }
					}
					leader = { set_owner = prevprev }
				}
				random_owned_planet = {
					limit = {
						exists = leader
						leader = { NOT = { is_owned_by = prevprev } }
					}
					leader = { set_owner = prevprev }
				}
			}
			every_playable_country = {
				limit = {
					any_owned_leader = {
						leader_class = admiral
						has_leader_flag = pirate_waves_leader
					}
				}
				random_owned_leader = {
					limit = {
						leader_class = admiral
						has_leader_flag = pirate_waves_leader
					}
					weights = { base = 1 modifier = { add = 5 exists = fleet } }
					if = {
						limit = {
							exists = fleet
							NOT = { fleet = { is_controlled_by = prevprev } }
						}
						set_owner = fleet.owner
					} else = {
						random_list = {
							1 = { random_country = { limit = { OR = { is_pirate = yes is_country_type = rebel } } prev = { set_owner = prev } } }
							2 = { modifier = { factor = 0 NOT = { exists = event_target:pirate_waves_country	} } set_owner = event_target:pirate_waves_country }
							3 = { modifier = { factor = 0 NOT = { exists = event_target:pirate_waves_2_country	} } set_owner = event_target:pirate_waves_2_country }
						}
					}
				}
			}
		}
	}
}

## Main Screen - Communication from the pirate leader.
country_event = {
	id = pirate_republic.100
	title = pirate_republic.100.name
	desc = pirate_republic.100.desc
	location = event_target:pirate_republic
	diplomatic = yes
	is_triggered_only = yes
	picture_event_data = {
		portrait = event_target:pirate_republic
		planet_background = event_target:pirate_republic
		graphical_culture = event_target:pirate_republic
		city_level = event_target:pirate_republic
		room = event_target:pirate_republic.ruler
	}
	# Return this planet right now!
	option = {
		name = pirate_republic.100.a
		response_text = pirate_republic.100.a.response
		is_dialog_only = yes
	}
	# Threaten them
	option = {
		name = pirate_republic.100.b
		response_text = pirate_republic.100.b.response
		is_dialog_only = yes
	}
	# What do you want?
	option = {
		name = pirate_republic.100.c
		response_text = pirate_republic.100.c.response
		is_dialog_only = yes
	}
	# Hear proposal
	option = {
		name = pirate_republic.100.d
		hidden_effect = {
			country_event = { id = pirate_republic.101 }
		}
		ai_chance = { factor = 1 }
	}
}

## Let's hear this proposal of yours...
country_event = {
	id = pirate_republic.101
	title = pirate_republic.100.name
	desc = pirate_republic.101.desc
	location = event_target:pirate_republic
	diplomatic = yes
	is_triggered_only = yes
	picture_event_data = {
		portrait = event_target:pirate_republic
		planet_background = event_target:pirate_republic
		graphical_culture = event_target:pirate_republic
		city_level = event_target:pirate_republic
		room = event_target:pirate_republic.ruler
	}
	# Are you insane?
	option = {
		name = pirate_republic.101.insane
		hidden_effect = {
			country_event = { id = pirate_republic.102 }
		}
	}
	# Refuse out of hand
	option = {
		name = pirate_republic.101.refuse
		hidden_effect = {
			country_event = { id = pirate_republic.104 }
		}
		ai_chance = { factor = 1 }
	}
}

## Are you insane?
country_event = {
	id = pirate_republic.102
	title = pirate_republic.100.name
	desc = pirate_republic.102.desc
	location = event_target:pirate_republic
	diplomatic = yes
	is_triggered_only = yes
	picture_event_data = {
		portrait = event_target:pirate_republic
		planet_background = event_target:pirate_republic
		graphical_culture = event_target:pirate_republic
		city_level = event_target:pirate_republic
		room = event_target:pirate_republic.ruler
	}
	# Accept
	option = {
		name = pirate_republic.102.accept
		hidden_effect = {
			country_event = { id = pirate_republic.103 }
		}
	}
	# Refuse
	option = {
		name = pirate_republic.102.refuse
		hidden_effect = {
			country_event = { id = pirate_republic.104 }
		}
		ai_chance = { factor = 1 }
	}
}

## Transform into subject empire
country_event = {
	id = pirate_republic.103
	title = pirate_republic.100.name
	desc = pirate_republic.103.desc
	location = event_target:pirate_republic
	diplomatic = yes
	is_triggered_only = yes
	picture_event_data = {
		portrait = event_target:pirate_republic
		planet_background = event_target:pirate_republic
		graphical_culture = event_target:pirate_republic
		city_level = event_target:pirate_republic
		room = event_target:pirate_republic.ruler
	}
	option = {
		name = pirate_republic.103.option
		event_target:pirate_republic = {
			set_country_type = default
			set_subject_of = {
				who = root
				preset = preset_tributary
			}
		}
	}
}

## Offer refused
country_event = {
	id = pirate_republic.104
	title = pirate_republic.100.name
	desc = pirate_republic.104.desc
	location = event_target:pirate_republic
	diplomatic = yes
	is_triggered_only = yes
	picture_event_data = {
		portrait = event_target:pirate_republic
		planet_background = event_target:pirate_republic
		graphical_culture = event_target:pirate_republic
		city_level = event_target:pirate_republic
		room = event_target:pirate_republic.ruler
	}
	immediate = {
		event_target:pirate_republic.capital_scope = {
			set_update_modifiers_batch = begin
			### Create Defense Armies (for some job reasons common armies get deleted)
			set_variable = { which = num_armies_var value = trigger:num_pops }
			divide_variable = { which = num_armies_var value = 7 }
			round_variable = num_armies_var
			# Replace few pops
			while = {
				count = num_armies_var
				create_army = {
					name = random
					owner = root
					species = owner_species
					type = "marauder_defense_army"
				}
				random_owned_pop = {
					limit = {
						is_robot_pop = no
						is_sapient = yes
					}
					weights = {
						base = 1
						modifier = { add = 1 is_unemployed = yes }
						modifier = { add = 1 NOT = { ideal_planet_class = prev } }
						modifier = { add = 1 prev = { habitability = { who = prev value < 0.7 } } }
						modifier = { add = 3 NOT = { is_same_species = prev.owner_species } }
					}
					kill_pop = yes
				}
				create_pop = {
					species = owner_species
					ethos = { ethic = "ethic_militarist" }
				}

			}
			# Establish few pops (dynamically)
			subtract_variable = { which = num_armies_var value = 1 }
			if = { limit = { check_variable = { which = num_armies_var value > 2 } }
				if = { limit = { check_variable = { which = num_armies_var value > 8 } }
					set_variable = { which = num_armies_var value = 8 } # max
				}
			} else = {
				set_variable = { which = num_armies_var value = 2 } # min
			}
			while = {
				count = num_armies_var
				create_pop = {
					species = owner_species
					ethos = { ethic = "ethic_militarist" }
				}
			}
			clear_variable = num_armies_var
			set_update_modifiers_batch = end
		}
	}
	option = { name = pirate_republic.104.option }
}

# Former Vanilla unrest.169
# Slaves Defect Diplomatic Message # From unrest.168 on_planet_defenders_lose
country_event = {
	id = pirate_republic.169 # unrest.169
	desc = unrest.169.desc
	location = event_target:revolt_planet
	title = TRANSMISSION
	diplomatic = yes
	picture_event_data = {
		portrait = from
		planet_background = from.capital_scope
		# graphical_culture = event_target:book_writer
		city_level = from.capital_scope
		room = from.ruler
	}
	is_triggered_only = yes
	option = {
		name = unrest.169.a
		add_opinion_modifier = {
			modifier = opinion_took_in_rebels
			who = from
		}
	}
	option = {
		name = unrest.169.b
		add_opinion_modifier = {
			modifier = opinion_took_in_rebels
			who = from
		}
	}
	option = {
		name = unrest.169.c
		add_opinion_modifier = {
			modifier = opinion_took_in_rebels
			who = from
		}
	}
}
